name: Build and release TNBase Application

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  Solution_Name: TNBase.sln
  Setup_Project: TNBase.Setup\TNBase.Setup.vdproj
  Configuration: Release

jobs:
  build:
    runs-on: windows-2019

    outputs:
      require_release: ${{ steps.release.outputs.require }}
      release_version: ${{ steps.release.outputs.version }}
      release_notes: ${{ steps.release.outputs.notes }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      - name: Execute unit tests
        run: dotnet test -c $env:Configuration

      - name: "Get previous version tag"
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: v0.0.0

      - name: Set release version
        id: release
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $version = ''
            $notes = ''
            foreach ($line in Get-Content '.\Release Notes.txt')
            {
                if($line -match '^[\d\.]+$'){
                    if($version -ne ''){
                        break
                    }
                    $version = $line
                }
                elseif($line.Trim() -ne ''){
                    $notes += "$line %0A"
                }
            }
            $newVersion = "v$version" -ne '${{ steps.previoustag.outputs.tag }}'
            Write-Output "::set-output name=require::$newVersion"
            Write-Output "::set-output name=version::$version"
            Write-Output "::set-output name=notes::$notes"
          azPSVersion: "latest"
          failOnStandardError: true

  release:
    needs: build
    if: needs.build.outputs.require_release == 'True'
    runs-on: windows-2019

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.1

      - name: Restore the application
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration

      - name: Apply version number
        run: |
          $project = Get-Content $env:Setup_Project
          $project = $project.Replace('"ProductVersion" = "8:1.0.0"', '"ProductVersion" = "8:${{ needs.build.outputs.release_version }}"')
          $productCode = '"ProductCode" = "8:{' + [guid]::NewGuid().toString().ToUpper()
          $project = $project -replace '"ProductCode" = "8:{[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}', $productCode
          $packageCode = '"PackageCode" = "8:{' + [guid]::NewGuid().toString().ToUpper()
          $project = $project -replace '"PackageCode" = "8:{[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}', $packageCode
          Set-Content $env:Setup_Project -Value $project
          Get-ChildItem .\src *.csproj -rec | ForEach-Object {
              $project = Get-Content $_.FullName
              $project = $project.Replace("<Version>1.0.0</Version>", "<Version>${{ needs.build.outputs.release_version }}</Version>")
              Set-Content $_.FullName -Value $project
          }

      - name: Setup VS Dev Environment
        uses: seanmiddleditch/gha-setup-vsdevenv@v4

      - name: Create installation package
        run: devenv $env:Solution_Name /build $env:Configuration  /Project $env:Setup_Project

      - name: Build file name
        id: file
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $suffix = ''
            if('pull_request' -eq '${{ github.event_name }}') {
              $suffix = '-prerelease'
            }
            Write-Output "::set-output name=name::TNBase-v${{ needs.build.outputs.release_version }}$suffix-win-x64.msi"
          azPSVersion: "latest"
          failOnStandardError: true

      - name: Rename setup file
        run: Rename-Item -Path "TNBase.Setup\Release\TNBase.Setup.msi" -NewName "${{ steps.file.outputs.name }}"

      - name: Publish prerelease artefact
        uses: actions/upload-artifact@v3
        if: github.ref != 'refs/heads/master'
        with:
          name: "${{ steps.file.outputs.name }}"
          path: "TNBase.Setup/Release/${{ steps.file.outputs.name }}"

      - name: Release
        uses: softprops/action-gh-release@v1
        if: github.ref == 'refs/heads/master'
        with:
          tag_name: "v${{ needs.build.outputs.release_version }}"
          body: "${{ needs.build.outputs.release_notes }}"
          files: |
            TNBase.Setup/Release/${{ steps.file.outputs.name }}
            Release Notes.txt
